import { app, BrowserWindow } from 'electron';
import { ICON, MIN_WIDTH, MIN_HEIGHT, HIDE_MENU } from '@constants/index';
import createTray from '@main/tray';
import BulbManager from '@main/BulbManager';
// import installExtension, { REACT_DEVELOPER_TOOLS } from 'electron-devtools-installer';

import checkForUpdates from '@main/updater';
import log from 'electron-log';
import initializeLogger from '@main/logger';
import initializeLanguage from '@main/language';
import registerIPCEvents from './ipcEvents';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
// eslint-disable-next-line @typescript-eslint/no-require-imports
if (require('electron-squirrel-startup')) {
  app.quit();
}

initializeLogger();
initializeLanguage(app);

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: MIN_HEIGHT,
    width: MIN_WIDTH,
    minWidth: MIN_WIDTH,
    minHeight: MIN_HEIGHT,
    icon: ICON,
    autoHideMenuBar: HIDE_MENU,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      devTools: !app.isPackaged,
    },
  });

  const bulbHelper = new BulbManager(mainWindow);

  checkForUpdates(app);
  createTray(mainWindow, app, bulbHelper);
  registerIPCEvents(bulbHelper);

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  mainWindow.on('close', () => {
    log.info('Closing app...');
    bulbHelper.endConnection();
  });

  mainWindow.on('minimize', () => {
    log.info('Hiding app to tray...');
    log.debug('Window size is:', mainWindow.getSize());
    mainWindow.hide();
  });
};

// Make this app a single-instance app.
const gotTheLock = app.requestSingleInstanceLock();
if (!gotTheLock) {
  app.quit();
} else {
  app.on('second-instance', () => {
    const mainWindow = BrowserWindow.getAllWindows()[0];
    if (mainWindow) {
      if (mainWindow.isMinimized()) {
        mainWindow.show();
      }
      mainWindow.focus();
    }
  });

  app.setName('WiZ App');

  // This method will be called when Electron has finished
  // initialization and is ready to create browser windows.
  // Some APIs can only be used after this event occurs.
  app.on('ready', createWindow);
}

/* app.whenReady().then(() => {
  installExtension(REACT_DEVELOPER_TOOLS)
    .then((name) => {
      console.log(`Added Extension:  ${name}`);
    })
    .catch((err) => {
      console.log('An error occurred: ', err);
    });
}); */

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});
